//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2020/03/06 15:21:44
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Assetz
{

    public partial class AssetzModel : DbContext
    {

        public AssetzModel() :
            base()
        {
            OnCreated();
        }

        public AssetzModel(DbContextOptions<AssetzModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=.;Initial Catalog=Assetz;Integrated Security=True;Persist Security Info=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Asset> Assets
        {
            get;
            set;
        }

        public virtual DbSet<AssetType> AssetTypes
        {
            get;
            set;
        }

        public virtual DbSet<VerificationEntry> VerificationEntries
        {
            get;
            set;
        }

        public virtual DbSet<Account> Accounts
        {
            get;
            set;
        }

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.AssetMapping(modelBuilder);
            this.CustomizeAssetMapping(modelBuilder);

            this.AssetTypeMapping(modelBuilder);
            this.CustomizeAssetTypeMapping(modelBuilder);

            this.VerificationEntryMapping(modelBuilder);
            this.CustomizeVerificationEntryMapping(modelBuilder);

            this.AccountMapping(modelBuilder);
            this.CustomizeAccountMapping(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Asset Mapping

        private void AssetMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Asset>().ToTable(@"Asset");
            modelBuilder.Entity<Asset>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Asset>().Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Asset>().Property<string>(x => x.Description).HasColumnName(@"Description").ValueGeneratedNever();
            modelBuilder.Entity<Asset>().Property<int?>(x => x.UsefulLifespan).HasColumnName(@"UsefulLifespan").ValueGeneratedNever();
            modelBuilder.Entity<Asset>().Property<string>(x => x.Code).HasColumnName(@"Code").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Asset>().Property<string>(x => x.DigitalCode).HasColumnName(@"DigitalCode").ValueGeneratedNever();
            modelBuilder.Entity<Asset>().Property<System.DateTimeOffset?>(x => x.PurchaseDate).HasColumnName(@"PurchaseDate").ValueGeneratedNever();
            modelBuilder.Entity<Asset>().Property<decimal?>(x => x.PurchasePrice).HasColumnName(@"PurchasePrice").ValueGeneratedNever();
            modelBuilder.Entity<Asset>().Property<decimal>(x => x.SalvageValue).HasColumnName(@"SalvageValue").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Asset>().Property<string>(x => x.Image).HasColumnName(@"Image").ValueGeneratedNever();
            modelBuilder.Entity<Asset>().Property<int>(x => x.AssetTypeId).HasColumnName(@"AssetTypeId").ValueGeneratedNever();
            modelBuilder.Entity<Asset>().Property<int>(x => x.AccountId).HasColumnName(@"AccountId").ValueGeneratedNever();
            modelBuilder.Entity<Asset>().Property<decimal>(x => x.Longitude).HasColumnName(@"Longitude").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Asset>().Property<decimal>(x => x.Latitude).HasColumnName(@"Latitude").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Asset>().HasKey(@"Id");
        }

        partial void CustomizeAssetMapping(ModelBuilder modelBuilder);

        #endregion

        #region AssetType Mapping

        private void AssetTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AssetType>().ToTable(@"AssetType");
            modelBuilder.Entity<AssetType>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<AssetType>().Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AssetType>().Property<string>(x => x.Description).HasColumnName(@"Description").ValueGeneratedNever();
            modelBuilder.Entity<AssetType>().Property<string>(x => x.Code).HasColumnName(@"Code").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AssetType>().Property<string>(x => x.Image).HasColumnName(@"Image").ValueGeneratedNever();
            modelBuilder.Entity<AssetType>().HasKey(@"Id");
        }

        partial void CustomizeAssetTypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region VerificationEntry Mapping

        private void VerificationEntryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VerificationEntry>().ToTable(@"VerificationEntry");
            modelBuilder.Entity<VerificationEntry>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<VerificationEntry>().Property<System.DateTimeOffset>(x => x.DateVerified).HasColumnName(@"DateVerified").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<VerificationEntry>().Property<string>(x => x.DigitalCode).HasColumnName(@"DigitalCode").ValueGeneratedNever();
            modelBuilder.Entity<VerificationEntry>().Property<string>(x => x.Image).HasColumnName(@"Image").ValueGeneratedNever();
            modelBuilder.Entity<VerificationEntry>().Property<bool>(x => x.IsManualVerification).HasColumnName(@"IsManualVerification").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VerificationEntry>().Property<int>(x => x.AssetId).HasColumnName(@"AssetId").ValueGeneratedNever();
            modelBuilder.Entity<VerificationEntry>().HasKey(@"Id");
        }

        partial void CustomizeVerificationEntryMapping(ModelBuilder modelBuilder);

        #endregion

        #region Account Mapping

        private void AccountMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>().ToTable(@"Account");
            modelBuilder.Entity<Account>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Account>().Property<bool>(x => x.IsActivated).HasColumnName(@"IsActivated").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Account>().Property<bool>(x => x.IsOpen).HasColumnName(@"IsOpen").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Account>().Property<System.DateTimeOffset?>(x => x.ActivationDate).HasColumnName(@"ActivationDate").ValueGeneratedNever();
            modelBuilder.Entity<Account>().Property<string>(x => x.ActivationCode).HasColumnName(@"ActivationCode").ValueGeneratedNever();
            modelBuilder.Entity<Account>().Property<System.DateTimeOffset?>(x => x.BillingPlanExpiryDate).HasColumnName(@"BillingPlanExpiryDate").ValueGeneratedNever();
            modelBuilder.Entity<Account>().HasKey(@"Id");
        }

        partial void CustomizeAccountMapping(ModelBuilder modelBuilder);

        #endregion

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"User");
            modelBuilder.Entity<User>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<User>().Property<string>(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property<string>(x => x.LastName).HasColumnName(@"LastName").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property<string>(x => x.Role).HasColumnName(@"Role").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property<string>(x => x.Email).HasColumnName(@"Email").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property<string>(x => x.PasswordSalt).HasColumnName(@"PasswordSalt").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property<int>(x => x.AccountId).HasColumnName(@"AccountId").ValueGeneratedNever();
            modelBuilder.Entity<User>().HasKey(@"Id");
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Asset>().HasOne(x => x.AssetType).WithMany(op => op.Assets).OnDelete(DeleteBehavior.Restrict).IsRequired(true).HasForeignKey(@"AssetTypeId");
            modelBuilder.Entity<Asset>().HasOne(x => x.Account).WithMany(op => op.Assets).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"AccountId");

            modelBuilder.Entity<VerificationEntry>().HasOne(x => x.Asset).WithMany(op => op.VerificationEntries).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"AssetId");

            modelBuilder.Entity<User>().HasOne(x => x.Account).WithMany(op => op.Users).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"AccountId");
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}

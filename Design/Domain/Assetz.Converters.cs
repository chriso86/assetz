//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 2020/03/06 15:21:45
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace Assetz
{

    public static partial class AssetConverter
    {

        public static AssetDto ToDto(this Asset source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static AssetDto ToDtoWithRelated(this Asset source, int level)
        {
            if (source == null)
              return null;

            var target = new AssetDto();

            // Properties
            target.Id = source.Id;
            target.Name = source.Name;
            target.Description = source.Description;
            target.UsefulLifespan = source.UsefulLifespan;
            target.Code = source.Code;
            target.DigitalCode = source.DigitalCode;
            target.PurchaseDate = source.PurchaseDate;
            target.PurchasePrice = source.PurchasePrice;
            target.SalvageValue = source.SalvageValue;
            target.Image = source.Image;
            target.AssetTypeId = source.AssetTypeId;
            target.AccountId = source.AccountId;
            target.Longitude = source.Longitude;
            target.Latitude = source.Latitude;

            // Navigation Properties
            if (level > 0) {
              target.AssetType = source.AssetType.ToDtoWithRelated(level - 1);
              target.Account = source.Account.ToDtoWithRelated(level - 1);
              target.VerificationEntries = source.VerificationEntries.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Asset ToEntity(this AssetDto source)
        {
            if (source == null)
              return null;

            var target = new Asset();

            // Properties
            target.Id = source.Id;
            target.Name = source.Name;
            target.Description = source.Description;
            target.UsefulLifespan = source.UsefulLifespan;
            target.Code = source.Code;
            target.DigitalCode = source.DigitalCode;
            target.PurchaseDate = source.PurchaseDate;
            target.PurchasePrice = source.PurchasePrice;
            target.SalvageValue = source.SalvageValue;
            target.Image = source.Image;
            target.AssetTypeId = source.AssetTypeId;
            target.AccountId = source.AccountId;
            target.Longitude = source.Longitude;
            target.Latitude = source.Latitude;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<AssetDto> ToDtos(this IEnumerable<Asset> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<AssetDto> ToDtosWithRelated(this IEnumerable<Asset> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Asset> ToEntities(this IEnumerable<AssetDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Asset source, AssetDto target);

        static partial void OnEntityCreating(AssetDto source, Asset target);

    }

    public static partial class AssetTypeConverter
    {

        public static AssetTypeDto ToDto(this AssetType source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static AssetTypeDto ToDtoWithRelated(this AssetType source, int level)
        {
            if (source == null)
              return null;

            var target = new AssetTypeDto();

            // Properties
            target.Id = source.Id;
            target.Name = source.Name;
            target.Description = source.Description;
            target.Code = source.Code;
            target.Image = source.Image;

            // Navigation Properties
            if (level > 0) {
              target.Assets = source.Assets.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static AssetType ToEntity(this AssetTypeDto source)
        {
            if (source == null)
              return null;

            var target = new AssetType();

            // Properties
            target.Id = source.Id;
            target.Name = source.Name;
            target.Description = source.Description;
            target.Code = source.Code;
            target.Image = source.Image;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<AssetTypeDto> ToDtos(this IEnumerable<AssetType> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<AssetTypeDto> ToDtosWithRelated(this IEnumerable<AssetType> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<AssetType> ToEntities(this IEnumerable<AssetTypeDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(AssetType source, AssetTypeDto target);

        static partial void OnEntityCreating(AssetTypeDto source, AssetType target);

    }

    public static partial class VerificationEntryConverter
    {

        public static VerificationEntryDto ToDto(this VerificationEntry source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static VerificationEntryDto ToDtoWithRelated(this VerificationEntry source, int level)
        {
            if (source == null)
              return null;

            var target = new VerificationEntryDto();

            // Properties
            target.Id = source.Id;
            target.DateVerified = source.DateVerified;
            target.DigitalCode = source.DigitalCode;
            target.Image = source.Image;
            target.IsManualVerification = source.IsManualVerification;
            target.AssetId = source.AssetId;

            // Navigation Properties
            if (level > 0) {
              target.Asset = source.Asset.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static VerificationEntry ToEntity(this VerificationEntryDto source)
        {
            if (source == null)
              return null;

            var target = new VerificationEntry();

            // Properties
            target.Id = source.Id;
            target.DateVerified = source.DateVerified;
            target.DigitalCode = source.DigitalCode;
            target.Image = source.Image;
            target.IsManualVerification = source.IsManualVerification;
            target.AssetId = source.AssetId;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<VerificationEntryDto> ToDtos(this IEnumerable<VerificationEntry> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<VerificationEntryDto> ToDtosWithRelated(this IEnumerable<VerificationEntry> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<VerificationEntry> ToEntities(this IEnumerable<VerificationEntryDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(VerificationEntry source, VerificationEntryDto target);

        static partial void OnEntityCreating(VerificationEntryDto source, VerificationEntry target);

    }

    public static partial class AccountConverter
    {

        public static AccountDto ToDto(this Account source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static AccountDto ToDtoWithRelated(this Account source, int level)
        {
            if (source == null)
              return null;

            var target = new AccountDto();

            // Properties
            target.Id = source.Id;
            target.IsActivated = source.IsActivated;
            target.IsOpen = source.IsOpen;
            target.ActivationDate = source.ActivationDate;
            target.ActivationCode = source.ActivationCode;
            target.BillingPlanExpiryDate = source.BillingPlanExpiryDate;

            // Navigation Properties
            if (level > 0) {
              target.Assets = source.Assets.ToDtosWithRelated(level - 1);
              target.Users = source.Users.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Account ToEntity(this AccountDto source)
        {
            if (source == null)
              return null;

            var target = new Account();

            // Properties
            target.Id = source.Id;
            target.IsActivated = source.IsActivated;
            target.IsOpen = source.IsOpen;
            target.ActivationDate = source.ActivationDate;
            target.ActivationCode = source.ActivationCode;
            target.BillingPlanExpiryDate = source.BillingPlanExpiryDate;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<AccountDto> ToDtos(this IEnumerable<Account> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<AccountDto> ToDtosWithRelated(this IEnumerable<Account> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Account> ToEntities(this IEnumerable<AccountDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Account source, AccountDto target);

        static partial void OnEntityCreating(AccountDto source, Account target);

    }

    public static partial class UserConverter
    {

        public static UserDto ToDto(this User source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static UserDto ToDtoWithRelated(this User source, int level)
        {
            if (source == null)
              return null;

            var target = new UserDto();

            // Properties
            target.Id = source.Id;
            target.FirstName = source.FirstName;
            target.LastName = source.LastName;
            target.Role = source.Role;
            target.Email = source.Email;
            target.PasswordSalt = source.PasswordSalt;
            target.AccountId = source.AccountId;

            // Navigation Properties
            if (level > 0) {
              target.Account = source.Account.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static User ToEntity(this UserDto source)
        {
            if (source == null)
              return null;

            var target = new User();

            // Properties
            target.Id = source.Id;
            target.FirstName = source.FirstName;
            target.LastName = source.LastName;
            target.Role = source.Role;
            target.Email = source.Email;
            target.PasswordSalt = source.PasswordSalt;
            target.AccountId = source.AccountId;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UserDto> ToDtos(this IEnumerable<User> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UserDto> ToDtosWithRelated(this IEnumerable<User> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<User> ToEntities(this IEnumerable<UserDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(User source, UserDto target);

        static partial void OnEntityCreating(UserDto source, User target);

    }

}
